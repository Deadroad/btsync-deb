#!/bin/sh -e

# Source debconf library.
. /usr/share/debconf/confmodule

# since older versions run btsync always as root, we
# should detect if we are updating such an old version
# in order to present "root" as default choice. On a
# new installation the default will be "btsync"
db_fget btsync/managed-configuration seen || RET="true"
ISCONF="${RET}"
db_get btsync/managed-configuration || RET=""
HASDEF="${RET}"
db_fget btsync/runas seen || RET="false"
BTUSER="${RET}"
db_fget btsync/runasgroup seen || RET="false"
BTGROUP="${RET}"
if [ "$ISCONF" = "true" ] && [ "$HASDEF" = "true" ] && [ "$BTUSER" = "false" ]; then
	# it was already configured but the credential
	# configuration was never asked.
	# Since everything is running as root, let's keep it so.
	db_set btsync/runas root
	db_set btsync/runasgroup default
fi
if [ "$ISCONF" = "true" ] && [ "$HASDEF" = "true" ] && [ "$BTGROUP" = "false" ]; then
	# it was already configured but the group credential
	# configuration was never asked.
	# Let's set it to default values
	db_set btsync/runasgroup default
fi
db_get btsync/runas || RET="btsync"
BTUSER="${RET}"
db_get btsync/runasgroup || RET="default"
BTGROUP="${RET}"

# configure default instance via debconf?
db_input high btsync/managed-configuration || true
db_go
db_get btsync/managed-configuration
if [ "$RET" = "false" ]; then
	# no further configuration needed
	exit 0
fi

# configure credentials for btsync
ALLUSERS="root, btsync"
for USERNAME in $(getent passwd | cut -d ":" -f 1 | sort); do
	case "${USERNAME}" in
	root);;		# ignore
	btsync);;	# ignore
	*)		ALLUSERS="${ALLUSERS}, ${USERNAME}"
	esac
done
db_subst btsync/runas btuids "${ALLUSERS}"
db_input high btsync/runas || true
db_go
db_get btsync/runas
BTNEWUSER=${RET}

# configure group credentials for btsync
ALLGROUPS="default, root, btsync"
for GROUPNAME in $(getent group | cut -d ":" -f 1 | sort); do
	case "${GROUPNAME}" in
	root);;		# ignore
	btsync);;	# ignore
	*)		ALLGROUPS="${ALLGROUPS}, ${GROUPNAME}"
	esac
done
db_subst btsync/runasgroup btgids "${ALLGROUPS}"
db_input high btsync/runasgroup || true
db_go
db_get btsync/runasgroup
BTNEWGROUP=${RET}

# show warning about changed credentials
if [ "$ISCONF" = "true" ] && [ "$BTNEWUSER" != "$BTUSER" -o "$BTNEWGROUP" != "$BTGROUP" ]; then
	db_input critical btsync/runas-changed || true
	db_go
fi

# ask for the name of the default instance
RET="\""
until [ $(expr match "${RET}" ".*[\\\"].*") -eq 0 ]; do
	db_input medium btsync/device-name || true
	db_go
	db_get btsync/device-name
done

# ask for the listening port
RET=-1
until [ $RET -eq 0 -o $RET -ge 1000 -a $RET -le 65534 ]; do
	db_input high btsync/bind-port || true
	db_go
	db_get btsync/bind-port
done

# ask for pnp
db_input high btsync/use-upnp || true
db_go

# ask for download limitation
RET=-1
until [ $RET -ge 0 -a $RET -le 1000000 ]; do
	db_input high btsync/limit-download || true
	db_go
	db_get btsync/limit-download
done

# ask for upload limitation
RET=-1
until [ $RET -ge 0 -a $RET -le 1000000 ]; do
	db_input high btsync/limit-upload || true
	db_go
	db_get btsync/limit-upload
done

# ask for webgui bind address
RET=""
until [ -n "$(echo $RET | awk -F"." ' $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255 ')" ]; do
	db_input high btsync/webgui-bindaddr || true
	db_go
	db_get btsync/webgui-bindaddr
done

# ask for webgui bind port
RET=0
until [ $RET -ge 80 -a $RET -le 65534 ]; do
	db_input high btsync/webgui-bindport || true
	db_go
	db_get btsync/webgui-bindport
done

# ask for username
db_input high btsync/webgui-username || true
db_go
db_get btsync/webgui-username

if [ "x$RET" != "x" ]; then
	# ask for password
	RET=""
	while [ "x$RET" = "x" ]; do
		db_input high btsync/webgui-password || true
		db_go
		db_get btsync/webgui-password
	done
fi

# ask for api key
RET="\""
until [ $(expr match "${RET}" ".*[\\\"].*") -eq 0 ]; do
	db_input medium btsync/api_key || true
	db_go
	db_get btsync/api_key
done

# ask for additional parameters
db_input medium btsync/daemon_umask || true
db_go
db_get btsync/daemon_umask

# ask for advanced parameters
db_input medium btsync/disk_low_priority || true
db_go
db_get btsync/disk_low_priority

db_input medium btsync/lan_encrypt_data || true
db_go
db_get btsync/lan_encrypt_data

db_input medium btsync/lan_use_tcp || true
db_go
db_get btsync/lan_use_tcp

db_input medium btsync/rate_limit_local_peers || true
db_go
db_get btsync/rate_limit_local_peers

RET=-1
until [ $RET -ge 60 -a $RET -le 86400 ]; do
	db_input medium btsync/folder_rescan_interval || true
	db_go
	db_get btsync/folder_rescan_interval
done

RET=-1
until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 5000 ]; do
	db_input medium btsync/max_file_size_diff_for_patching || true
	db_go
	db_get btsync/max_file_size_diff_for_patching
done

RET=-1
until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 5000 ]; do
	db_input medium btsync/max_file_size_for_versioning || true
	db_go
	db_get btsync/max_file_size_for_versioning
done

RET=-1
until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 100 ]; do
	db_input medium btsync/send_buf_size || true
	db_go
	db_get btsync/send_buf_size
done

RET=-1
until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 100 ]; do
	db_input medium btsync/recv_buf_size || true
	db_go
	db_get btsync/recv_buf_size
done

RET=-1
until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 6000 ]; do
	db_input medium btsync/sync_max_time_diff || true
	db_go
	db_get btsync/sync_max_time_diff
done

RET=-1
until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 365 ]; do
	db_input medium btsync/sync_trash_ttl || true
	db_go
	db_get btsync/sync_trash_ttl
done
