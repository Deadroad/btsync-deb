#!/bin/sh
#
# (c) 2013-2014 YeaSoft Int'l - Leo Moll
#
# This script manages the runtime environment and behaviour
# of BitTorrent Sync (btsync) in a desktop environment

# In order to create clear isolated user environments, all
# configuration and runtime data of btsync must be kept in
# the users home directory and there shall be no conflicts
# between concurrent btsync instances of different users
# since more than one user can be logged in
# Furthermore the script must be able to handle the update
# of btsync initiated under root credentials

# The configuration file for each user is created automatically
# based on the template /etc/btsync-user/btsync-user.conf in
# his home directory as ~/.config/btsync/btsync-auto.conf
# defining a user specific storage directory (~/.btsync),
# a user specific device name, a user specific PID file and
# a user specific port number for the web ui. A user specific
# web ui shortcut is created in ~/.local/share/applications

# The user can override the settings of his personal
# configuration file by creating a configuration file in his
# home directory named ~/.config/btsync/btsync-user.conf

#####################################
# variables section

# compute user specific directories
DESTDIR=${HOME}
DATADIR=${DESTDIR}/.btsync
CFGPATH=${DESTDIR}/.config/btsync
PIDFILE=${CFGPATH}/btsync.pid
CFGFILE=${CFGPATH}/btsync-auto.conf
USRFILE=${CFGPATH}/btsync-user.conf
LOKFILE=${DATADIR}/indicator.lock

APPLDIR=${HOME}/.local/share/applications
APPFILE=${APPLDIR}/btsync-user.desktop
DEVNAME="$(hostname) - $(whoami)"

RUNNING_STATEFILE="${DATADIR}/running"
PAUSED_STATEFILE="${DATADIR}/paused"
UPDATING_STATEFILE="/var/run/btsync-user-updating"

AGENT=/usr/lib/btsync-user/btsync-agent
FRONT=/usr/lib/btsync-user/btsyncindicator.py
ICONS=/usr/share/icons/hicolor/22x22/status

# "sedify" replacemnt data
XDATADIR="$(echo ${DATADIR} | sed -e "s/\\//\\\\\//g")"
XPIDFILE="$(echo ${PIDFILE} | sed -e "s/\\//\\\\\//g")"
XDEVNAME="$(echo ${DEVNAME} | sed -e "s/\\//\\\\\//g")"
XPORTNUM="$((8999+$(id -u)))"

#####################################
# utility functions

log_message() {
	if [ -f ${DATADIR}/debug.txt ]; then
		echo "$(date --rfc-3339=seconds) $*" >> ${DATADIR}/btsync-user.log
	fi
}

make_userfiles() {
	mkdir -p ${CFGPATH}
	mkdir -p ${DATADIR}
	mkdir -p ${APPLDIR}
	sed \
		-e "s/DATADIR/${XDATADIR}/g" \
		-e "s/PIDFILE/${XPIDFILE}/g" \
		-e "s/DEVNAME/${XDEVNAME}/g" \
		-e "s/PORTNUM/${XPORTNUM}/g" \
		> ${CFGFILE} < /etc/btsync-user/btsync-user.conf
	sed \
		-e "s/DATADIR/${XDATADIR}/g" \
		-e "s/PIDFILE/${XPIDFILE}/g" \
		-e "s/DEVNAME/${XDEVNAME}/g" \
		-e "s/PORTNUM/${XPORTNUM}/g" \
		> ${APPFILE} < /etc/btsync-user/btsync-user.desktop
	log_message "make_user_files: User specific files and directories created"
}

update_configuration() {
	# remove old configuration and PID files if still there
	[ -f ${DESTDIR}/.btsync.conf ] && rm -f ${DESTDIR}/.btsync.conf
	[ -f ${DESTDIR}/.btsync.pid ]  && rm -f ${DESTDIR}/.btsync.pid
	# if a user specific configuration file is defined, move it to
	# the new configuration location and rename it
	if [ -f ${DESTDIR}/btsync.conf ]; then
		log_message "update_configuration: Moved ${DESTDIR}/btsync.conf to ${USRFILE}"
		mv ${DESTDIR}/btsync.conf ${USRFILE}
	fi
}

adjust_arm_alignment() {
	if [ -r /proc/cpu/alignment ]; then
		if ! ${AGENT} --help > /dev/null 2> /dev/null; then
			# something is wrong
			if ${AGENT} --help | grep -i "Alignment error" > /dev/null 2> /dev/null; then
				log_message "adjust_arm_alignment: Adjusted alignment setting on ARM processor"
				echo 2 > /proc/cpu/alignment
			fi
		fi
	fi
}

start_frontend() {
	log_message "start_frontend: begin"
	if ! pgrep -u $(id -u) -f btsyncindicator.py > /dev/null; then
		if [ -n "$1" ]; then
			log_message "start_frontend: waiting $1 seconds"
			sleep $1
		fi
	fi
	if ! pgrep -u $(id -u) -f btsyncindicator.py > /dev/null; then
		if [ -f "${LOKFILE}" ]; then
			log_message "start_frontend: frontend not running but LOCKFILE detected! Strange! btsyncindicator should handle it"
			FPID=$(cat "${LOKFILE}")
			if [ -d "/proc/${FPID}" ]; then
				log_message "start_frontend: btsyncindicator will fail since there is another process using the PID from the lockfile!!! This should be fixed in the CONTEXTMANAGER!!!"
				log_message "start_frontend: lockfile will be deleted here"
				rm -f "${LOKFILE}"
			fi
		fi
		if [ -f "${USRFILE}" ]; then
			log_message "start_frontend: starting frontend with user specific config file ${USRFILE}"
			${FRONT} --config "${USRFILE}" --iconpath "${ICONS}" &
		else
			log_message "start_frontend: starting frontend with default config file ${CFGFILE}"
			${FRONT} --config "${CFGFILE}" --iconpath "${ICONS}" &
		fi
	fi
	# test if the start was successful
	if pgrep -u $(id -u) -f btsyncindicator.py > /dev/null; then
		FPID=$(pgrep -u $(id -u) -f btsyncindicator.py)
		log_message "start_frontend: process is running with pid ${FPID}"
	else
		log_message "start_frontend: process is NOT running!!!! Something went wrong!"
	fi

	log_message "start_frontend: end"
}

stop_frontend() {
	log_message "stop_frontend: begin"
	pkill -u $(id -u) -f btsyncindicator.py
	log_message "stop_frontend: end"
	# rm -f "${LOKFILE}"
}

start_agent() {
	log_message "start_agent: begin"
	if ! pgrep -u $(id -u) -x btsync-agent > /dev/null; then
		adjust_arm_alignment
		if [ -f "${USRFILE}" ]; then
			log_message "start_agent: starting agent with user specific config file ${USRFILE}"
			${AGENT} --config "${USRFILE}"
		else
			log_message "start_agent: starting agent with default config file ${CFGFILE}"
			${AGENT} --config "${CFGFILE}"
		fi
	fi
	log_message "start_agent: end"
}

stop_agent() {
	log_message "stop_agent: begin"
	trap - INT QUIT TERM EXIT
	rm -f "${RUNNING_STATEFILE}"
	rm -f "${PAUSED_STATEFILE}"
	pkill -u $(id -u) -x btsync-agent
	pkill -u $(id -u) -f btsyncindicator.py
	log_message "stop_agent: end - exiting..."
	exit
}


agent_runner() {
	log_message "agent_runner: begin"
	trap stop_agent INT QUIT TERM EXIT
	touch "${RUNNING_STATEFILE}"
	while [ -f "${RUNNING_STATEFILE}" ]; do
		if [ -f "${UPDATING_STATEFILE}" ]; then
			# System is beeing updated. Sleep a while
			# and wait for restarting everything
			log_message "agent_runner: in update - waiting..."
			sleep 2
		elif [ -f "${PAUSED_STATEFILE}" ]; then
			# System is paused. Sleep a while and
			# wait for system resume
			log_message "agent_runner: in pause - waiting..."
			sleep 1
		else
			log_message "agent_runner: starting up components..."
			cd ~
			# Normal situation. Regenerate user files and
			# startup normally
			make_userfiles
			# make sure the frontend is running
			start_frontend 1
			# start the agent
			start_agent
			# give the agent some time to fork
			sleep 1
			# wait for process to finish
			while pgrep -u $(id -u) -x btsync-agent > /dev/null; do
				sleep 1
			done
			log_message "agent_runner: agent terminated..."
			if [ -f "${UPDATING_STATEFILE}" ]; then
				# we should stop the frontend since it could
				# also be updated
				log_message "agent_runner: stop frontend during update"
				stop_frontend
			elif [ ! -f "${PAUSED_STATEFILE}" ]; then
				# no reason to stay online. stop the whole game
				log_message "agent_runner: termination requested. Stopping agent..."
				stop_agent
			fi
		fi
	done
	trap - INT QUIT TERM EXIT
	log_message "agent_runner: end"
}


#####################################
# the main script
log_message "btsync-starter: start"

# create user specific files
make_userfiles
# update file structure in user directory
update_configuration
# make sure the frontend is running
start_frontend

if pgrep -u $(id -u) -x btsync-agent > /dev/null; then
	log_message "btsync-starter: btsync-agent already running - nothing to do"
	echo "btsync-agent already running - nothing to do"
	exit 0
elif [ -f "${RUNNING_STATEFILE}" ]; then
	log_message "btsync-starter: running statefile detected"
	if [ $(pgrep -u $(id -u) -f btsync-starter | wc -l) -gt 1 ]; then
		# the agent is not running, but there is an agent runner
		# that means that the agent is paused
		log_message "btsync-starter: btsync-agent paused - forked runner present - use indicator or commandline to unpause it"
		log_message "btsync-starter: end"
		exit 0
	else
		# the forked agent runner must be crashed without deleting
		# the run file. Let's fork one....
		log_message "btsync-starter: re-forking runner..."
		agent_runner &
		log_message "btsync-starter: end"
		exit 0
	fi
	log_message "btsync-starter: running statefile detected but nothing to do"
else
	# fork the agent runner
	log_message "btsync-starter: no running statefile detected - forking runner..."
	agent_runner &
fi
log_message "btsync-starter: end"
