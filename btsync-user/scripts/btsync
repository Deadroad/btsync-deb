#!/bin/bash
#
# (c) 2013 YeaSoft Int'l - Leo Moll
#
# This script allows to manage the
# btsync user agent

#####################################
# variables section

# compute user specific directories
DESTDIR=${HOME}
DATADIR=${DESTDIR}/.btsync
CFGPATH=${DESTDIR}/.config/btsync
PIDFILE=${CFGPATH}/btsync.pid
CFGFILE=${CFGPATH}/btsync-auto.conf
USRFILE=${CFGPATH}/btsync-user.conf

APPLDIR=${HOME}/.local/share/applications
APPFILE=${APPLDIR}/btsync-user.desktop
DEVNAME="$(hostname) - $(whoami)"

RUNNING_STATEFILE="${DATADIR}/running"
PAUSED_STATEFILE="${DATADIR}/paused"
UPDATING_STATEFILE="/var/run/btsync-user-updating"

# initialize runtime variables
VERBOSE=1

#####################################
# basic script functions

function usage {
	cat <<EOF
usage: btsync [-vq] <command> [param]

Commands:
 start              start the btsync system
 stop               stop the btsync system
 restart            restarts the btsync system
 pause              suspends the btsync system
 stop               resumes the btsync system
 status             output the btsync status
 debug|setdebug	    enables/configures/disables verbose logging
 nodebug            disables verbose logging

Options:
 -v, --verbose      increase verbosity
 -q, --quiet        say nothing - only return error codes

This script allows to manage the BitTorrent Sync Desktop application

EOF
}

function show_verbose {
	if [ $VERBOSE -ge $1 ]; then
		echo "${*:2}"
	fi
}

function show_error {
	echo "btsync error: $*" >&2
}

PARSER=$(getopt --name "$SCRIPTNAME" --options h,v,q --longoptions help,verbose,quiet -- "$@")
case $? in
0);;
1) show_error "syntax or usage error (code $?)"; exit $?;;
2) show_error "syntax or usage error (code $?) in [getopt]"; exit $?;;
3) show_error "internal error (code $?) in [getopt]"; exit $?;;
4) show_error "wrong getopt version istalled"; exit $?;;
*) show_error "Unknown getopt error (code $?)"; exit $?;;
esac

# Parameter parsing
eval set -- "$PARSER"
while true; do
	case "$1" in
	-h|--help)			usage; exit 0;;
	-v|--verbose)			(( VERBOSE++ )); shift;;
	-q|--quiet)			VERBOSE=0; shift;;
	--)				shift; break;;
        *)				echo "btsync: $1: unknown option"; show_error "syntax or usage error (code 1)"; exit 1;;
        esac
done

# configuration checking

if [ -z $1 ]; then
	usage
	exit 0
fi

RESULT=0

case "$1" in
start)
	if [ -f "${RUNNING_STATEFILE}" -a -f "${PAUSED_STATEFILE}" ]; then
		show_verbose 2 "Resuming btsync instead of starting..."
		rm -f "${PAUSED_STATEFILE}"
		RESULT=$?
		show_verbose 2 "Done."
	else
		show_verbose 2 "Starting btsync..."
		/usr/lib/btsync-user/btsync-starter
		RESULT=$?
		show_verbose 2 "Done."
	fi
	;;
stop)
	show_verbose 2 "Stopping btsync..."
	/usr/lib/btsync-user/btsync-stopper
	RESULT=$?
	show_verbose 2 "Done."
	;;
restart)
	show_verbose 2 "Restarting btsync..."
	/usr/lib/btsync-user/btsync-stopper
	sleep 5
	/usr/lib/btsync-user/btsync-starter
	RESULT=$?
	show_verbose 2 "Done."
	;;
pause|suspend)
	if [ -f "${PAUSED_STATEFILE}" ]; then
		show_verbose 1 "btsync is already paused"
		RESULT=1
	elif [ -f "${RUNNING_STATEFILE}" ]; then
		show_verbose 2 "Suspending..."
		touch "${PAUSED_STATEFILE}"
		pkill -u $(id -u) -x btsync-agent
		RESULT=$?
		show_verbose 2 "Done."
	else
		show_verbose 1 "Cannot suspend since btsync is not running"
		RESULT=2
	fi
	;;
resume)
	if [ -f "${PAUSED_STATEFILE}" ]; then
		show_verbose 2 "Resuming btsync..."
		rm -f "${PAUSED_STATEFILE}"
		RESULT=$?
		show_verbose 2 "Done."
	elif [ -f "${RUNNING_STATEFILE}" ]; then
		show_verbose 1 "btsync is already running"
		RESULT=1
	else
		show_verbose 1 "Cannot resume since btsync is not running"
		RESULT=2
	fi
	;;
status)
	if [ -f "${RUNNING_STATEFILE}" ]; then
		if [ -f "${PAUSED_STATEFILE}" ]; then
			show_verbose 1 "paused"
			RESULT=1
		else
			show_verbose 1 "running"
			RESULT=0
		fi
	else
		show_verbose 1 "stopped"
		RESULT=2
	fi
	;;
debug|setdebug)
	case "$2" in
	1|on|On|ON)
		show_verbose 1 "Enabling verbose logging"
		echo "FFFF" > "${DATADIR}/debug.txt"
		;;
	0|off|Off|OFF)
		show_verbose 1 "Disabling verbose logging"
		rm -f "${DATADIR}/debug.txt"
		;;
	[0-9,A-F,a-f][0-9,A-F,a-f][0-9,A-F,a-f][0-9,A-F,a-f])
		show_verbose 1 "Enabling verbose logging (Mask: $2)"
		echo "$2" > "${DATADIR}/debug.txt"
		;;
	*)
		if [ -f "${DATADIR}/debug.txt" ]; then
			case "$(head -n 1 ${DATADIR}/debug.txt)" in
			FFFF|ffff)
				show_verbose 1 "debug=on"
				RESULT=1
				;;
			*)
				show_verbose 1 "debug=$(head -n 1 ${DATADIR}/debug.txt)"
				RESULT=1
				;;
			esac
		else
			show_verbose 1 "debug=off"
			RESULT=0
		fi
		;;
	esac
	;;
nodebug)
	show_verbose 1 "Disabling verbose logging"
	rm -f "${DATADIR}/debug.txt"
	;;
help)
	usage
	;;
*)
	show_error "Unknown command $1"
	RESULT=99
	;;
esac
exit ${RESULT}
