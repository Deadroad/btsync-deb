#!/usr/bin/env python
# coding=utf-8
#
# Copyright 2014 Leo Moll
#
# Authors: Leo Moll and Contributors (see CREDITS)
#
# Thanks to Mark Johnson for btsyncindicator.py which gave me the
# last nudge needed to learn python and write my first linux gui
# application. Thank you!
#
# This file is part of btsync-gui. btsync-gui is free software: you can
# redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

import os
import sys
import dbus
import signal
import logging
import argparse
import subprocess

sys.path.append('/usr/lib/btsync-gui')

from gi.repository import Gtk
from btsyncagent import *
from btsyncstatus import *

class GuiApp:

	def __init__(self,args):
		self.agent = None
		self.indicator = None
		try:
			# instantiate agent
			self.agent = BtSyncAgent(args)
			# create graceful shutdown mechanisms
			signal.signal(signal.SIGTERM, self.on_signal_term)
			self.bus = dbus.SessionBus()
			self.bus.call_on_disconnection(self.on_session_disconnect)
		except dbus.DBusException as e:
			# basically we can ignore this...
			logging.warning('Failed to connect to session bus: '+str(e))
		except BtSingleInstanceException as e:
			# we are running in auto mode and someone tries to start a
			# second instance
			logging.error(e.message)
			# exit - we cannot tollerate this!
			exit(-1)
		except Exception as e:
			# this should not really happen...
			logging.critical('Unexpected exception caught: '+str(e))
			exit(-1)

	def run(self):
		try:
			self.agent.startup()
			# initialize indicator
			self.indicator = BtSyncStatus(self.agent)
			self.indicator.startup()
			# giro giro tondo...
			Gtk.main()
		except Exception as e:
			logging.critical('Unexpected exception caught: '+str(e))
		finally:
			# good night!
			self.shutdown()

	def shutdown(self,returncode=0):
		logging.info('Shutting down application...')
		if self.indicator is not None:
			self.indicator.shutdown()
		if self.agent is not None:
			self.agent.shutdown()
		logging.shutdown()
		exit(returncode)

	def on_session_disconnect(self, connection):
		logging.info('Disconnected from session bus. Shutting down...')
		self.shutdown()

	def on_signal_term(self, signum, frame):
		logging.warning('Signal {0} received. Shutting down...'.format(signum))
		self.shutdown()


if __name__ == "__main__":
	parser = argparse.ArgumentParser()

	parser.add_argument('--log', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'],
				default='WARNING',
				help="Set logging level")
	parser.add_argument('--host',
				default='auto',
				help="Hostname for the connection to BitTorrent Sync")
	parser.add_argument('--port', type=int,
				default=8888,
				help="Port number for the connection to BitTorrent Sync")

	parser.add_argument('--username',
				default=None,
				help="Optional user name for the connection to BitTorrent Sync")

	parser.add_argument('--password',
				default=None,
				help="Optional password for the connection to BitTorrent Sync")

	args = parser.parse_args()

	# initialize logger
	numeric_level = getattr(logging, args.log.upper(), None)
	if not isinstance(numeric_level, int):
		raise ValueError('Invalid log level: %s' % args.log)
	logging.basicConfig(level=numeric_level)
	if not os.path.isdir(os.environ['HOME'] + '/.btsync'):
		os.makedirs(os.environ['HOME'] + '/.btsync')
	fh = logging.FileHandler(filename=os.environ['HOME'] + '/.btsync/btsync-gui.log')
	ff = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
	fh.setFormatter(ff)
	logging.getLogger().addHandler(fh)
	logging.getLogger().setLevel(numeric_level)


	# play the music
	app = GuiApp(args)
	app.run()

